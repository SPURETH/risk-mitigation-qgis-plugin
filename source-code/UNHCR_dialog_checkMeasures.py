# -*- coding: utf-8 -*-
"""
/***************************************************************************
 step1Dialog
                                 A QGIS plugin
 step 1 - definition of camp extent
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Laura Schalbetter (PLUS ETHZ)
        email                : schalaur@ethz.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import pathlib
import sys
import os
from .installer import installer_func

installer_func()
import pandas as pd

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QDialogButtonBox, QCheckBox


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "UNHCR_dialog_checkMeasures_base.ui")
)


class CheckMeasuresDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(CheckMeasuresDialog, self).__init__(parent)

        self.setupUi(self)

        # self.label_Information.setText(message)

        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.handle_accepted)
        button_box.rejected.connect(self.handle_rejected)

    def getCheckboxStates(self):

        checkboxes = self.findChildren(QCheckBox)

        # Collect checkbox names and values in separate lists
        checkbox_names = []
        checkbox_values = []
        for checkbox in checkboxes:
            checkbox_names.append(checkbox.objectName().split("_", 1)[1])
            checkbox_values.append(checkbox.isChecked())

        # Create a DataFrame from the checkbox values with column names
        df = pd.DataFrame(
            {name: value for name, value in zip(checkbox_names, checkbox_values)},
            index=[0],
        )

        return df
    
    def getCheckboxText(self):

        checkboxes = self.findChildren(QCheckBox)

        checkbox_text = []

        for checkbox in checkboxes:
            if checkbox.isChecked():
                checkbox_text.append(checkbox.text())

        return checkbox_text

    def handle_accepted(self):
        # Perform actions specific to OK button
        self.accept()
        # self.step1.drawCamp()

    def handle_rejected(self):
        # Perform actions specific to Cancel button
        self.reject()

    def closeEvent(self, event):
        # Perform actions specific to window close button
        super().closeEvent(event)
